package io.microagents.a2a.core.types.core;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.microagents.a2a.core.types.notifications.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/**
 * Represents a single message exchanged between A2A client and agent.
 *
 * <p>Messages are the fundamental unit of communication in A2A and can contain multiple parts
 * (text, files, structured data). They have a role indicating the sender and can be associated with
 * tasks and contexts.
 *
 * @see Part
 * @see Role
 * @see Task
 * @since 0.1.0
 */
public final class Message implements Event {

  public static final String KIND = "message";

  /**
   * Message identifier generated by the message sender. Must be unique within the conversation
   * context.
   */
  @NotBlank(message = "Message ID cannot be blank")
  private String messageId;

  /**
   * The context ID the message is associated with. Optional - if set, the message will be
   * associated with the given context.
   */
  private String contextId;

  /**
   * The task ID the message is related to. Optional - if set, the message will be associated with
   * the given task.
   */
  private String taskId;

  /** The role of the message sender (user or agent). */
  @NotNull(message = "Message role cannot be null")
  private Role role;

  /** Message content as an array of parts. Must contain at least one part. */
  @NotEmpty(message = "Message must contain at least one part")
  @Valid
  private List<Part> parts = new ArrayList<>();

  /** Optional metadata associated with this message. */
  private Map<String, Object> metadata;

  /** List of extension URIs that contributed to this message. */
  private List<String> extensions;

  /** List of task IDs referenced as contextual hint by this message. */
  private List<String> referenceTaskIds;

  /** Default constructor for Jackson deserialization. */
  public Message() {}

  /**
   * Creates a new Message with basic properties.
   *
   * @param messageId unique message identifier
   * @param role message sender role
   * @param parts message content parts
   */
  public Message(String messageId, Role role, List<Part> parts) {
    this.messageId = messageId;
    this.role = role;
    this.parts = parts != null ? new ArrayList<>(parts) : new ArrayList<>();
  }

  /**
   * Gets the type discriminator for this object.
   *
   * @return the kind identifier ("message")
   */
  @JsonProperty("kind")
  @NotNull
  public String getKind() {
    return KIND;
  }

  /**
   * Gets the message identifier.
   *
   * @return the message ID
   */
  public String getMessageId() {
    return messageId;
  }

  /**
   * Sets the message identifier.
   *
   * @param messageId the message ID (must not be blank)
   */
  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }

  /**
   * Gets the context ID this message is associated with.
   *
   * @return the context ID, or null if not associated with a context
   */
  public String getContextId() {
    return contextId;
  }

  /**
   * Sets the context ID this message is associated with.
   *
   * @param contextId the context ID
   */
  public void setContextId(String contextId) {
    this.contextId = contextId;
  }

  /**
   * Gets the task ID this message is related to.
   *
   * @return the task ID, or null if not related to a specific task
   */
  public String getTaskId() {
    return taskId;
  }

  /**
   * Sets the task ID this message is related to.
   *
   * @param taskId the task ID
   */
  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }

  /**
   * Gets the role of the message sender.
   *
   * @return the sender role
   */
  public Role getRole() {
    return role;
  }

  /**
   * Sets the role of the message sender.
   *
   * @param role the sender role (must not be null)
   */
  public void setRole(Role role) {
    this.role = role;
  }

  /**
   * Gets the message content parts.
   *
   * @return the list of content parts
   */
  public List<Part> getParts() {
    return parts;
  }

  /**
   * Sets the message content parts.
   *
   * @param parts the list of content parts (must not be empty)
   */
  public void setParts(List<Part> parts) {
    this.parts = parts != null ? new ArrayList<>(parts) : new ArrayList<>();
  }

  /**
   * Gets the optional metadata for this message.
   *
   * @return the metadata map, or null if no metadata is present
   */
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  /**
   * Sets the optional metadata for this message.
   *
   * @param metadata the metadata map
   */
  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }

  /**
   * Gets the list of extension URIs that contributed to this message.
   *
   * @return the list of extension URIs, or null if no extensions are present
   */
  public List<String> getExtensions() {
    return extensions;
  }

  /**
   * Sets the list of extension URIs that contributed to this message.
   *
   * @param extensions the list of extension URIs
   */
  public void setExtensions(List<String> extensions) {
    this.extensions = extensions;
  }

  /**
   * Gets the list of task IDs referenced by this message.
   *
   * @return the list of referenced task IDs, or null if no tasks are referenced
   */
  public List<String> getReferenceTaskIds() {
    return referenceTaskIds;
  }

  /**
   * Sets the list of task IDs referenced by this message.
   *
   * @param referenceTaskIds the list of referenced task IDs
   */
  public void setReferenceTaskIds(List<String> referenceTaskIds) {
    this.referenceTaskIds = referenceTaskIds;
  }

  /**
   * Builder-style method to set the context ID.
   *
   * @param contextId the context ID
   * @return this Message instance for method chaining
   */
  public Message withContextId(String contextId) {
    this.contextId = contextId;
    return this;
  }

  /**
   * Builder-style method to set the task ID.
   *
   * @param taskId the task ID
   * @return this Message instance for method chaining
   */
  public Message withTaskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

  /**
   * Builder-style method to set the metadata.
   *
   * @param metadata the metadata map
   * @return this Message instance for method chaining
   */
  public Message withMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Builder-style method to add a content part.
   *
   * @param part the content part to add
   * @return this Message instance for method chaining
   */
  public Message addPart(Part part) {
    if (this.parts == null) {
      this.parts = new ArrayList<>();
    }
    this.parts.add(part);
    return this;
  }

  /**
   * Creates a simple text message.
   *
   * @param messageId unique message identifier
   * @param role sender role
   * @param text text content
   * @return a new Message instance
   */
  public static Message ofText(String messageId, Role role, String text) {
    return new Message(messageId, role, List.of(new TextPart(text)));
  }

  /**
   * Creates a user text message.
   *
   * @param messageId unique message identifier
   * @param text text content
   * @return a new Message instance with USER role
   */
  public static Message userText(String messageId, String text) {
    return ofText(messageId, Role.USER, text);
  }

  /**
   * Creates an agent text message.
   *
   * @param messageId unique message identifier
   * @param text text content
   * @return a new Message instance with AGENT role
   */
  public static Message agentText(String messageId, String text) {
    return ofText(messageId, Role.AGENT, text);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Message message = (Message) o;
    return Objects.equals(messageId, message.messageId)
        && Objects.equals(contextId, message.contextId)
        && Objects.equals(taskId, message.taskId)
        && role == message.role
        && Objects.equals(parts, message.parts)
        && Objects.equals(metadata, message.metadata)
        && Objects.equals(extensions, message.extensions)
        && Objects.equals(referenceTaskIds, message.referenceTaskIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        messageId, contextId, taskId, role, parts, metadata, extensions, referenceTaskIds);
  }

  @Override
  public String toString() {
    return "Message{"
        + "messageId='"
        + messageId
        + '\''
        + ", contextId='"
        + contextId
        + '\''
        + ", taskId='"
        + taskId
        + '\''
        + ", role="
        + role
        + ", parts="
        + parts
        + ", metadata="
        + metadata
        + ", extensions="
        + extensions
        + ", referenceTaskIds="
        + referenceTaskIds
        + '}';
  }
}
