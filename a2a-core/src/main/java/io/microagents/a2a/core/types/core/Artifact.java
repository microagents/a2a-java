package io.microagents.a2a.core.types.core;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.microagents.a2a.core.types.notifications.*;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import java.util.*;

/**
 * Represents an artifact generated for a task.
 *
 * <p>Artifacts are outputs generated by agents during task execution. They contain parts (text,
 * files, or structured data) and metadata about the artifact's purpose and content.
 */
public class Artifact {

  @NotBlank
  @JsonProperty("artifactId")
  private final String artifactId;

  @JsonProperty("name")
  private final String name;

  @JsonProperty("description")
  private final String description;

  @NotEmpty
  @Valid
  @JsonProperty("parts")
  private final List<Part> parts;

  @JsonProperty("extensions")
  private final List<String> extensions;

  @JsonProperty("metadata")
  private final Map<String, Object> metadata;

  /**
   * Creates a new Artifact with the specified ID and parts.
   *
   * @param artifactId unique identifier for the artifact
   * @param parts artifact parts (must not be empty)
   */
  public Artifact(@NotBlank String artifactId, @NotEmpty List<Part> parts) {
    this(artifactId, null, null, parts, null, null);
  }

  /**
   * Creates a new Artifact with all fields.
   *
   * @param artifactId unique identifier for the artifact
   * @param name optional name for the artifact
   * @param description optional description for the artifact
   * @param parts artifact parts (must not be empty)
   * @param extensions URIs of extensions present in this artifact
   * @param metadata extension metadata
   */
  public Artifact(
      @NotBlank String artifactId,
      String name,
      String description,
      @NotEmpty List<Part> parts,
      List<String> extensions,
      Map<String, Object> metadata) {
    this.artifactId = Objects.requireNonNull(artifactId, "artifactId cannot be null").trim();
    if (this.artifactId.isEmpty()) {
      throw new IllegalArgumentException("artifactId cannot be blank");
    }
    this.name = name;
    this.description = description;
    this.parts =
        Collections.unmodifiableList(
            new ArrayList<>(Objects.requireNonNull(parts, "parts cannot be null")));
    if (this.parts.isEmpty()) {
      throw new IllegalArgumentException("parts cannot be empty");
    }
    this.extensions =
        extensions == null ? null : Collections.unmodifiableList(new ArrayList<>(extensions));
    this.metadata = metadata == null ? null : Collections.unmodifiableMap(new HashMap<>(metadata));
  }

  /**
   * Gets the unique identifier for the artifact.
   *
   * @return the artifact ID
   */
  @NotBlank
  public String getArtifactId() {
    return artifactId;
  }

  /**
   * Gets the optional name for the artifact.
   *
   * @return the name, or null if not specified
   */
  public String getName() {
    return name;
  }

  /**
   * Gets the optional description for the artifact.
   *
   * @return the description, or null if not specified
   */
  public String getDescription() {
    return description;
  }

  /**
   * Gets the artifact parts.
   *
   * @return unmodifiable list of parts
   */
  @NotEmpty
  public List<Part> getParts() {
    return parts;
  }

  /**
   * Gets the URIs of extensions present in this artifact.
   *
   * @return unmodifiable list of extension URIs, or null if none
   */
  public List<String> getExtensions() {
    return extensions;
  }

  /**
   * Gets the extension metadata.
   *
   * @return unmodifiable map of metadata, or null if none
   */
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  /**
   * Creates a new Artifact with the specified ID and parts.
   *
   * @param artifactId unique identifier for the artifact
   * @param parts artifact parts
   * @return a new Artifact instance
   */
  public static Artifact of(@NotBlank String artifactId, @NotEmpty List<Part> parts) {
    return new Artifact(artifactId, parts);
  }

  /**
   * Creates a new Artifact with the specified ID and a single part.
   *
   * @param artifactId unique identifier for the artifact
   * @param part single artifact part
   * @return a new Artifact instance
   */
  public static Artifact of(@NotBlank String artifactId, @NotNull Part part) {
    return new Artifact(artifactId, List.of(part));
  }

  /**
   * Creates a builder for constructing Artifact instances.
   *
   * @param artifactId the required artifact ID
   * @return a new builder instance
   */
  public static Builder builder(@NotBlank String artifactId) {
    return new Builder(artifactId);
  }

  /** Builder for constructing Artifact instances. */
  public static class Builder {
    private final String artifactId;
    private String name;
    private String description;
    private final List<Part> parts = new ArrayList<>();
    private final List<String> extensions = new ArrayList<>();
    private final Map<String, Object> metadata = new HashMap<>();

    private Builder(@NotBlank String artifactId) {
      this.artifactId = Objects.requireNonNull(artifactId, "artifactId cannot be null").trim();
      if (this.artifactId.isEmpty()) {
        throw new IllegalArgumentException("artifactId cannot be blank");
      }
    }

    /**
     * Sets the artifact name.
     *
     * @param name the name
     * @return this builder
     */
    public Builder withName(String name) {
      this.name = name;
      return this;
    }

    /**
     * Sets the artifact description.
     *
     * @param description the description
     * @return this builder
     */
    public Builder withDescription(String description) {
      this.description = description;
      return this;
    }

    /**
     * Adds a part to the artifact.
     *
     * @param part the part to add
     * @return this builder
     */
    public Builder addPart(@NotNull Part part) {
      this.parts.add(Objects.requireNonNull(part, "part cannot be null"));
      return this;
    }

    /**
     * Adds multiple parts to the artifact.
     *
     * @param parts the parts to add
     * @return this builder
     */
    public Builder addParts(@NotNull Collection<Part> parts) {
      Objects.requireNonNull(parts, "parts cannot be null");
      parts.forEach(part -> addPart(part));
      return this;
    }

    /**
     * Adds an extension URI.
     *
     * @param extensionUri the extension URI
     * @return this builder
     */
    public Builder addExtension(@NotBlank String extensionUri) {
      Objects.requireNonNull(extensionUri, "extensionUri cannot be null");
      if (extensionUri.trim().isEmpty()) {
        throw new IllegalArgumentException("extensionUri cannot be blank");
      }
      this.extensions.add(extensionUri.trim());
      return this;
    }

    /**
     * Adds multiple extension URIs.
     *
     * @param extensionUris the extension URIs
     * @return this builder
     */
    public Builder addExtensions(@NotNull Collection<String> extensionUris) {
      Objects.requireNonNull(extensionUris, "extensionUris cannot be null");
      extensionUris.forEach(uri -> addExtension(uri));
      return this;
    }

    /**
     * Adds a metadata entry.
     *
     * @param key the metadata key
     * @param value the metadata value
     * @return this builder
     */
    public Builder addMetadata(@NotBlank String key, Object value) {
      Objects.requireNonNull(key, "key cannot be null");
      if (key.trim().isEmpty()) {
        throw new IllegalArgumentException("key cannot be blank");
      }
      this.metadata.put(key.trim(), value);
      return this;
    }

    /**
     * Adds multiple metadata entries.
     *
     * @param metadata the metadata entries
     * @return this builder
     */
    public Builder addMetadata(@NotNull Map<String, Object> metadata) {
      Objects.requireNonNull(metadata, "metadata cannot be null");
      metadata.forEach((key, value) -> addMetadata(key, value));
      return this;
    }

    /**
     * Builds the Artifact instance.
     *
     * @return a new Artifact
     * @throws IllegalArgumentException if no parts were added
     */
    public Artifact build() {
      if (parts.isEmpty()) {
        throw new IllegalArgumentException("At least one part must be added");
      }
      return new Artifact(
          artifactId,
          name,
          description,
          parts,
          extensions.isEmpty() ? null : extensions,
          metadata.isEmpty() ? null : metadata);
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    Artifact artifact = (Artifact) o;
    return Objects.equals(artifactId, artifact.artifactId)
        && Objects.equals(name, artifact.name)
        && Objects.equals(description, artifact.description)
        && Objects.equals(parts, artifact.parts)
        && Objects.equals(extensions, artifact.extensions)
        && Objects.equals(metadata, artifact.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(artifactId, name, description, parts, extensions, metadata);
  }

  @Override
  public String toString() {
    return "Artifact{"
        + "artifactId='"
        + artifactId
        + '\''
        + ", name='"
        + name
        + '\''
        + ", description='"
        + description
        + '\''
        + ", parts="
        + parts
        + ", extensions="
        + extensions
        + ", metadata="
        + metadata
        + '}';
  }
}
