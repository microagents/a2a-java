package io.microagents.a2a.core.types.security;

import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.validation.constraints.NotBlank;
import java.util.Objects;

/**
 * HTTP Authentication security scheme.
 *
 * <p>This security scheme represents HTTP authentication methods such as Basic authentication,
 * Bearer tokens, and other RFC7235-defined schemes.
 */
public class HTTPAuthSecurityScheme extends SecurityScheme {

  @JsonProperty("type")
  private final String type = "http";

  @NotBlank
  @JsonProperty("scheme")
  private final String scheme;

  @JsonProperty("bearerFormat")
  private final String bearerFormat;

  @JsonProperty("description")
  private final String description;

  /**
   * Creates a new HTTPAuthSecurityScheme with required fields.
   *
   * @param scheme the name of the HTTP Authentication scheme to be used
   */
  public HTTPAuthSecurityScheme(@NotBlank String scheme) {
    this(scheme, null, null);
  }

  /**
   * Creates a new HTTPAuthSecurityScheme with all fields.
   *
   * @param scheme the name of the HTTP Authentication scheme to be used
   * @param bearerFormat a hint to identify how the bearer token is formatted (may be null)
   * @param description description of this security scheme (may be null)
   */
  public HTTPAuthSecurityScheme(@NotBlank String scheme, String bearerFormat, String description) {
    this.scheme = Objects.requireNonNull(scheme, "scheme cannot be null").trim();
    if (this.scheme.isEmpty()) {
      throw new IllegalArgumentException("scheme cannot be blank");
    }
    this.bearerFormat = bearerFormat;
    this.description = description;
  }

  /**
   * Gets the security scheme type (always "http").
   *
   * @return the type
   */
  public String getType() {
    return type;
  }

  /**
   * Gets the name of the HTTP Authentication scheme to be used in the Authorization header.
   *
   * <p>As defined in RFC7235. The values used SHOULD be registered in the IANA Authentication
   * Scheme registry. The value is case-insensitive, as defined in RFC7235.
   *
   * @return the scheme name
   */
  @NotBlank
  public String getScheme() {
    return scheme;
  }

  /**
   * Gets a hint to the client to identify how the bearer token is formatted.
   *
   * <p>Bearer tokens are usually generated by an authorization server, so this information is
   * primarily for documentation purposes.
   *
   * @return the bearer format hint, or null if not specified
   */
  public String getBearerFormat() {
    return bearerFormat;
  }

  /**
   * Gets the description of this security scheme.
   *
   * @return the description, or null if not specified
   */
  public String getDescription() {
    return description;
  }

  /**
   * Creates a Basic authentication security scheme.
   *
   * @return a new HTTPAuthSecurityScheme for Basic authentication
   */
  public static HTTPAuthSecurityScheme basic() {
    return new HTTPAuthSecurityScheme("basic");
  }

  /**
   * Creates a Bearer token authentication security scheme.
   *
   * @return a new HTTPAuthSecurityScheme for Bearer authentication
   */
  public static HTTPAuthSecurityScheme bearer() {
    return new HTTPAuthSecurityScheme("bearer");
  }

  /**
   * Creates a Bearer token authentication security scheme with format hint.
   *
   * @param bearerFormat the bearer token format (e.g., "JWT")
   * @return a new HTTPAuthSecurityScheme for Bearer authentication
   */
  public static HTTPAuthSecurityScheme bearer(String bearerFormat) {
    return new HTTPAuthSecurityScheme("bearer", bearerFormat, null);
  }

  /**
   * Creates a JWT Bearer token authentication security scheme.
   *
   * @return a new HTTPAuthSecurityScheme for JWT Bearer authentication
   */
  public static HTTPAuthSecurityScheme jwt() {
    return bearer("JWT");
  }

  /**
   * Creates a new HTTPAuthSecurityScheme with the specified scheme.
   *
   * @param scheme the authentication scheme
   * @return a new HTTPAuthSecurityScheme instance
   */
  public static HTTPAuthSecurityScheme of(@NotBlank String scheme) {
    return new HTTPAuthSecurityScheme(scheme);
  }

  /**
   * Creates a builder for constructing HTTPAuthSecurityScheme instances.
   *
   * @param scheme the required authentication scheme
   * @return a new builder instance
   */
  public static Builder builder(@NotBlank String scheme) {
    return new Builder(scheme);
  }

  /** Builder for constructing HTTPAuthSecurityScheme instances. */
  public static class Builder {
    private final String scheme;
    private String bearerFormat;
    private String description;

    private Builder(@NotBlank String scheme) {
      this.scheme = Objects.requireNonNull(scheme, "scheme cannot be null").trim();
      if (this.scheme.isEmpty()) {
        throw new IllegalArgumentException("scheme cannot be blank");
      }
    }

    /**
     * Sets the bearer format hint.
     *
     * @param bearerFormat the bearer format
     * @return this builder
     */
    public Builder withBearerFormat(String bearerFormat) {
      this.bearerFormat = bearerFormat;
      return this;
    }

    /**
     * Sets the description.
     *
     * @param description the description
     * @return this builder
     */
    public Builder withDescription(String description) {
      this.description = description;
      return this;
    }

    /**
     * Builds the HTTPAuthSecurityScheme instance.
     *
     * @return a new HTTPAuthSecurityScheme
     */
    public HTTPAuthSecurityScheme build() {
      return new HTTPAuthSecurityScheme(scheme, bearerFormat, description);
    }
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;
    HTTPAuthSecurityScheme that = (HTTPAuthSecurityScheme) o;
    return Objects.equals(type, that.type)
        && Objects.equals(scheme, that.scheme)
        && Objects.equals(bearerFormat, that.bearerFormat)
        && Objects.equals(description, that.description);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, scheme, bearerFormat, description);
  }

  @Override
  public String toString() {
    return "HTTPAuthSecurityScheme{"
        + "type='"
        + type
        + '\''
        + ", scheme='"
        + scheme
        + '\''
        + ", bearerFormat='"
        + bearerFormat
        + '\''
        + ", description='"
        + description
        + '\''
        + '}';
  }
}
